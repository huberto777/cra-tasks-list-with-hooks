{"version":3,"sources":["context/AuthContext.js","api/wait.js","components/ErrorBoundary.js","api/FakeAuthApi.js","components/LoginForm.js","App.js","serviceWorker.js","index.js","components/Input.js"],"names":["AuthContext","React","createContext","accessToken","wait","ms","Promise","resolve","setTimeout","ErrorBoundary","state","hasError","error","info","console","log","this","props","message","children","Component","FakeAuthApi","login","credentials","email","password","Error","LoginForm","onLoginAttempt","errorMessage","formik","useFormik","initialValues","onSubmit","values","handleSubmit","className","Input","name","type","label","value","onChange","handleChange","onBlur","handleBlur","AuthApp","lazy","App","previousLoginAttemptFailed","expiresIn","handleLoginAttempt","AuthAPI","then","localStorage","setItem","getAccessToken","catch","setState","handleLogout","removeItem","intID","setInterval","clearInterval","getItem","token","jwt","decode","isUserLoggedIn","Provider","Suspense","fallback","onLogout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e15c09a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AuthContext = React.createContext({ accessToken: null });\r\n\r\nexport default AuthContext;\r\n","export function wait(ms) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, ms);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n  static getDerivedStateFromError() {\r\n    return { hasError: true };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    console.log('Wystąpił następujący błąd:', error, info);\r\n  }\r\n  render() {\r\n    const { message, children } = this.props;\r\n    return this.state.hasError ? message : children;\r\n  }\r\n}\r\nErrorBoundary.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  children: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","import { wait } from './wait';\r\n\r\nconst FakeAuthApi = {\r\n  async login(credentials) {\r\n    await wait(200);\r\n    const { email, password } = credentials;\r\n    if (email === 'hubert@example.com' && password === 'secret') {\r\n      return {\r\n        accessToken:\r\n          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJvYkBleGFtcGxlLmNvbSIsImlhdCI6MTU4OTg3OTkxNywiZXhwIjoxNTg5ODgzNTE3LCJzdWIiOiIyIn0.BRhgk1nXn4eDRrwei_No0EVom6uv8feCTOYLGOl-j1E',\r\n      };\r\n    }\r\n    throw new Error('invalid credentials');\r\n  },\r\n};\r\n\r\nexport default FakeAuthApi;\r\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport Input from './Input';\n\nconst LoginForm = ({ onLoginAttempt, errorMessage }) => {\n  const formik = useFormik({\n    initialValues: { email: 'hubert@example.com', password: 'secret' },\n    onSubmit: (values) => {\n      onLoginAttempt(values);\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"jumbotron bg-dark text-white\">\n      {errorMessage ? <div className=\"text text-center text-danger\">{errorMessage}</div> : null}\n      <Input\n        name=\"email\"\n        type=\"text\"\n        label=\"Email:\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n      />\n      <Input\n        name=\"password\"\n        type=\"password\"\n        label=\"Password:\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n      />\n      <button type=\"submit\" className=\"btn btn-block btn-outline-warning\">\n        Submit\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport jwt from 'jsonwebtoken';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport AuthContext from './context/AuthContext';\nimport AuthAPI from './api/FakeAuthApi';\nimport LoginForm from './components/LoginForm';\n\nconst AuthApp = React.lazy(() => import('./components/AuthApp'));\n\nclass App extends React.Component {\n  state = {\n    accessToken: null,\n    previousLoginAttemptFailed: false,\n    expiresIn: 3600000,\n  };\n\n  componentDidMount() {\n    this.getAccessToken();\n    this.intID = setInterval(() => {\n      this.handleLogout();\n    }, this.state.expiresIn);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intID);\n  }\n\n  getAccessToken() {\n    this.setState({\n      accessToken: localStorage.getItem('accessToken'),\n      previousLoginAttemptFailed: false,\n    });\n  }\n  getUserExpires(token) {\n    const decodedToken = jwt.decode(token);\n    return decodedToken;\n  }\n\n  isUserLoggedIn() {\n    return !!this.state.accessToken;\n  }\n\n  handleLoginAttempt = (credentials) => {\n    AuthAPI.login(credentials)\n      .then(({ accessToken }) => {\n        localStorage.setItem('accessToken', accessToken);\n        this.getAccessToken();\n      })\n      .catch(() => {\n        this.setState({\n          accessToken: null,\n          previousLoginAttemptFailed: true,\n        });\n      });\n  };\n\n  handleLogout = () => {\n    this.setState({\n      accessToken: localStorage.removeItem('accessToken'),\n      previousLoginAttemptFailed: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ErrorBoundary message=\"Coś nie działa w całej aplikacji\">\n          {this.isUserLoggedIn() ? (\n            <AuthContext.Provider value={{ accessToken: this.state.accessToken }}>\n              <React.Suspense fallback=\"... Loading\">\n                <AuthApp onLogout={this.handleLogout} />\n              </React.Suspense>\n            </AuthContext.Provider>\n          ) : (\n            <LoginForm\n              errorMessage={\n                this.state.previousLoginAttemptFailed ? 'Nie udało się zalogować' : null\n              }\n              onLoginAttempt={this.handleLoginAttempt}\n            />\n          )}\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react';\n\nconst Input = ({ ...props }) => {\n  return (\n    <div className=\"form-group row\">\n      <label className=\"col-form-label text-md-left col-md-2\">{props.label}</label>\n      <div className=\"col-md-12\">\n        <input {...props} className=\"form-control\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}