{"version":3,"sources":["context/AuthContext.js","api/wait.js","components/ErrorBoundary.js","api/FakeAuthApi.js","components/LoginForm.js","components/App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","accessToken","wait","ms","Promise","resolve","setTimeout","ErrorBoundary","state","hasError","error","info","console","log","this","props","message","children","Component","FakeAuthApi","login","credentials","email","password","Error","LoginForm","handleSubmit","event","preventDefault","onLoginAttempt","emailInput","current","value","passwordInput","createRef","className","onSubmit","errorMessage","htmlFor","ref","type","defaultValue","AuthApp","lazy","App","previousLoginAttemptFailed","expiresIn","handleLoginAttempt","AuthAPI","then","localStorage","setItem","getAccessToken","catch","setState","handleLogout","removeItem","intID","setInterval","clearInterval","getItem","token","jwt","decode","isUserLoggedIn","Provider","Suspense","fallback","onLogout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8GAAA,WAEMA,EAFN,OAEoBC,EAAMC,cAAc,CAAEC,YAAa,OAExCH,O,iCCJR,SAASI,EAAKC,GACnB,OAAO,IAAIC,SAAQ,SAACC,GAClBC,WAAWD,EAASF,MAFxB,mC,yaCuBeI,E,4MAnBbC,MAAQ,CACNC,UAAU,G,gEAKMC,EAAOC,GACvBC,QAAQC,IAAI,2DAA8BH,EAAOC,K,+BAEzC,IAAD,EACuBG,KAAKC,MAA3BC,EADD,EACCA,QAASC,EADV,EACUA,SACjB,OAAOH,KAAKN,MAAMC,SAAWO,EAAUC,K,kDAPvC,MAAO,CAAER,UAAU,O,GALKV,IAAMmB,W,4CCanBC,EAdK,CACZC,MADY,SACNC,GAAc,OAAD,4HACjBnB,YAAK,KADY,UAEfoB,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACD,uBAAVD,GAA+C,WAAbC,EAHf,yCAId,CACLtB,YACE,qLANiB,aASjB,IAAIuB,MAAM,uBATO,+CC4DZC,E,kDA5Db,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAIRW,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKb,MAAMc,eAAe,CACxBP,MAAO,EAAKQ,WAAWC,QAAQC,MAC/BT,SAAU,EAAKU,cAAcF,QAAQC,QAEvC,EAAKF,WAAWC,QAAQC,MAAQ,GAChC,EAAKC,cAAcF,QAAQC,MAAQ,IAVnC,EAAKF,WAAa/B,IAAMmC,YACxB,EAAKD,cAAgBlC,IAAMmC,YAHV,E,qDAgBjB,OACE,yBAAKC,UAAU,gCACb,0BAAMC,SAAUtB,KAAKY,cAClBZ,KAAKC,MAAMsB,aACV,yBAAKF,UAAU,sBAAsBrB,KAAKC,MAAMsB,cAC9C,KAEJ,yBAAKF,UAAU,kBACb,2BAAOG,QAAQ,QAAQH,UAAU,yCAAjC,UAGA,yBAAKA,UAAU,YACb,2BACEI,IAAKzB,KAAKgB,WACVU,KAAK,OACLC,aAAa,qBACbN,UAAU,mBAIhB,yBAAKA,UAAU,kBACb,2BAAOG,QAAQ,WAAWH,UAAU,yCAApC,eAGA,yBAAKA,UAAU,YACb,2BACEI,IAAKzB,KAAKmB,cACVO,KAAK,WACLC,aAAa,SACbN,UAAU,mBAIhB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,wBACb,4BAAQA,UAAU,qCAAlB,4B,GApDUpC,IAAMmB,WCKxBwB,EAAU3C,IAAM4C,MAAK,kBAAM,uDAgFlBC,E,4MA7EbpC,MAAQ,CACNP,YAAa,KACb4C,4BAA4B,EAC5BC,UAAW,M,EA6BbC,mBAAqB,SAAC1B,GACpB2B,EAAQ5B,MAAMC,GACX4B,MAAK,YAAsB,IAAnBhD,EAAkB,EAAlBA,YACPiD,aAAaC,QAAQ,cAAelD,GACpC,EAAKmD,oBAENC,OAAM,WACL,EAAKC,SAAS,CACZrD,YAAa,KACb4C,4BAA4B,Q,EAKpCU,aAAe,WACb,EAAKD,SAAS,CACZrD,YAAaiD,aAAaM,WAAW,eACrCX,4BAA4B,K,kEA3CX,IAAD,OAClB/B,KAAKsC,iBACLtC,KAAK2C,MAAQC,aAAY,WACvB,EAAKH,iBACJzC,KAAKN,MAAMsC,a,6CAIda,cAAc7C,KAAK2C,S,uCAInB3C,KAAKwC,SAAS,CACZrD,YAAaiD,aAAaU,QAAQ,eAClCf,4BAA4B,M,qCAGjBgB,GAEb,OADqBC,IAAIC,OAAOF,K,uCAKhC,QAAS/C,KAAKN,MAAMP,c,+BAyBpB,OACE,yBAAKkC,UAAU,OACb,kBAAC,EAAD,CAAenB,QAAQ,mDACpBF,KAAKkD,iBACJ,kBAAClE,EAAA,EAAYmE,SAAb,CAAsBjC,MAAO,CAAE/B,YAAaa,KAAKN,MAAMP,cACrD,kBAAC,IAAMiE,SAAP,CAAgBC,SAAS,eACvB,kBAACzB,EAAD,CAAS0B,SAAUtD,KAAKyC,iBAI5B,kBAAC,EAAD,CACElB,aACEvB,KAAKN,MAAMqC,2BAA6B,yCAA4B,KAEtEhB,eAAgBf,KAAKiC,2B,GArEjBhD,IAAMmB,WCGJmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.79e144e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AuthContext = React.createContext({ accessToken: null });\r\n\r\nexport default AuthContext;\r\n","export function wait(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends React.Component {\n  state = {\n    hasError: false,\n  };\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n  componentDidCatch(error, info) {\n    console.log('Wystąpił następujący błąd:', error, info);\n  }\n  render() {\n    const { message, children } = this.props;\n    return this.state.hasError ? message : children;\n  }\n}\nErrorBoundary.propTypes = {\n  message: PropTypes.string.isRequired,\n  children: PropTypes.any.isRequired,\n};\n\nexport default ErrorBoundary;\n","import { wait } from './wait';\n\nconst FakeAuthApi = {\n  async login(credentials) {\n    await wait(200);\n    const { email, password } = credentials;\n    if (email === 'hubert@example.com' && password === 'secret') {\n      return {\n        accessToken:\n          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJvYkBleGFtcGxlLmNvbSIsImlhdCI6MTU4OTg3OTkxNywiZXhwIjoxNTg5ODgzNTE3LCJzdWIiOiIyIn0.BRhgk1nXn4eDRrwei_No0EVom6uv8feCTOYLGOl-j1E',\n      };\n    }\n    throw new Error('invalid credentials');\n  },\n};\n\nexport default FakeAuthApi;\n","import React from 'react';\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.emailInput = React.createRef();\n    this.passwordInput = React.createRef();\n  }\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.onLoginAttempt({\n      email: this.emailInput.current.value,\n      password: this.passwordInput.current.value,\n    });\n    this.emailInput.current.value = '';\n    this.passwordInput.current.value = '';\n  };\n\n  render() {\n    return (\n      <div className=\"jumbotron bg-dark text-white\">\n        <form onSubmit={this.handleSubmit}>\n          {this.props.errorMessage ? (\n            <div className=\"alert alert-danger\">{this.props.errorMessage}</div>\n          ) : null}\n          {/* <div className=\"form-row\"> */}\n          <div className=\"form-group row\">\n            <label htmlFor=\"email\" className=\"col-form-label text-md-right col-md-2\">\n              Email:\n            </label>\n            <div className=\"col-md-8\">\n              <input\n                ref={this.emailInput}\n                type=\"text\"\n                defaultValue=\"hubert@example.com\"\n                className=\"form-control\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group row\">\n            <label htmlFor=\"password\" className=\"col-form-label text-md-right col-md-2\">\n              Hasło:\n            </label>\n            <div className=\"col-md-8\">\n              <input\n                ref={this.passwordInput}\n                type=\"password\"\n                defaultValue=\"secret\"\n                className=\"form-control\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group row\">\n            <div className=\"col-md-8 offset-md-2\">\n              <button className=\"btn btn-block btn-outline-warning\">Zaloguj się</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport jwt from 'jsonwebtoken';\nimport ErrorBoundary from './ErrorBoundary';\nimport AuthContext from '../context/AuthContext';\nimport AuthAPI from '../api/FakeAuthApi';\nimport LoginForm from './LoginForm';\n\nconst AuthApp = React.lazy(() => import('./AuthApp'));\n\nclass App extends React.Component {\n  state = {\n    accessToken: null,\n    previousLoginAttemptFailed: false,\n    expiresIn: 3600000,\n  };\n\n  componentDidMount() {\n    this.getAccessToken();\n    this.intID = setInterval(() => {\n      this.handleLogout();\n    }, this.state.expiresIn);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intID);\n  }\n\n  getAccessToken() {\n    this.setState({\n      accessToken: localStorage.getItem('accessToken'),\n      previousLoginAttemptFailed: false,\n    });\n  }\n  getUserExpires(token) {\n    const decodedToken = jwt.decode(token);\n    return decodedToken;\n  }\n\n  isUserLoggedIn() {\n    return !!this.state.accessToken;\n  }\n\n  handleLoginAttempt = (credentials) => {\n    AuthAPI.login(credentials)\n      .then(({ accessToken }) => {\n        localStorage.setItem('accessToken', accessToken);\n        this.getAccessToken();\n      })\n      .catch(() => {\n        this.setState({\n          accessToken: null,\n          previousLoginAttemptFailed: true,\n        });\n      });\n  };\n\n  handleLogout = () => {\n    this.setState({\n      accessToken: localStorage.removeItem('accessToken'),\n      previousLoginAttemptFailed: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ErrorBoundary message=\"Coś nie działa w całej aplikacji\">\n          {this.isUserLoggedIn() ? (\n            <AuthContext.Provider value={{ accessToken: this.state.accessToken }}>\n              <React.Suspense fallback=\"... Loading\">\n                <AuthApp onLogout={this.handleLogout} />\n              </React.Suspense>\n            </AuthContext.Provider>\n          ) : (\n            <LoginForm\n              errorMessage={\n                this.state.previousLoginAttemptFailed ? 'Nie udało się zalogować' : null\n              }\n              onLoginAttempt={this.handleLoginAttempt}\n            />\n          )}\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}