{"version":3,"sources":["components/ErrorBoundary.js","components/LoginForm.js","components/api/AxiosAuthApi.js","components/App.js","serviceWorker.js","index.js","context/AuthContext.js"],"names":["ErrorBoundary","state","hasError","error","info","console","log","this","props","message","children","React","Component","LoginForm","handleSubmit","event","preventDefault","onLoginAttempt","email","emailInput","current","value","password","passwordInput","createRef","className","onSubmit","errorMessage","htmlFor","ref","type","defaultValue","AxiosAuthenticationAPI","login","credentials","a","Axios","post","response","result","data","AuthApp","lazy","App","accessToken","previousLoginAttemptFailed","expiresIn","handleLoginAttempt","AuthAPI","then","localStorage","setItem","getAccessToken","catch","setState","handleLogout","removeItem","token","jwt","decode","getItem","intID","setInterval","clearInterval","isUserLoggedIn","AuthContext","Provider","Suspense","fallback","onLogout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","createContext"],"mappings":"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","file":"static/js/main.43cd318f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    // You can also log the error to an error reporting service\r\n    console.log(\"Wystąpił następujący błąd:\", error, info);\r\n  }\r\n  render() {\r\n    const { message, children } = this.props;\r\n    return this.state.hasError ? message : children;\r\n  }\r\n}\r\nErrorBoundary.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  children: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\n\r\nclass LoginForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.emailInput = React.createRef();\r\n    this.passwordInput = React.createRef();\r\n  }\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onLoginAttempt({\r\n      email: this.emailInput.current.value,\r\n      password: this.passwordInput.current.value,\r\n    });\r\n    this.emailInput.current.value = \"\";\r\n    this.passwordInput.current.value = \"\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron bg-dark text-white\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.props.errorMessage ? (\r\n            <div className=\"alert alert-danger\">{this.props.errorMessage}</div>\r\n          ) : null}\r\n          {/* <div className=\"form-row\"> */}\r\n          <div className=\"form-group row\">\r\n            <label\r\n              htmlFor=\"email\"\r\n              className=\"col-form-label text-md-right col-md-2\"\r\n            >\r\n              Email:\r\n            </label>\r\n            <div className=\"col-md-8\">\r\n              <input\r\n                ref={this.emailInput}\r\n                type=\"text\"\r\n                defaultValue=\"hubert@example.com\"\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <label\r\n              htmlFor=\"password\"\r\n              className=\"col-form-label text-md-right col-md-2\"\r\n            >\r\n              Hasło:\r\n            </label>\r\n            <div className=\"col-md-8\">\r\n              <input\r\n                ref={this.passwordInput}\r\n                type=\"password\"\r\n                defaultValue=\"secret\"\r\n                className=\"form-control\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <div className=\"col-md-8 offset-md-2\">\r\n              <button className=\"btn btn-block btn-outline-warning\">\r\n                Zaloguj się\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import Axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:5000\";\r\nconst AxiosAuthenticationAPI = {\r\n  login: async function (credentials) {\r\n    const response = await Axios.post(`${BASE_URL}/login`, credentials);\r\n    const result = response.data;\r\n    return result;\r\n  },\r\n};\r\n\r\nexport default AxiosAuthenticationAPI;\r\n","import React from \"react\";\n\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport LoginForm from \"./LoginForm\";\nimport AuthContext from \"../context/AuthContext\";\nimport AuthAPI from \"./api/AxiosAuthApi\";\nimport jwt from \"jsonwebtoken\";\n\nconst AuthApp = React.lazy(() => import(\"./AuthApp\"));\n\nclass App extends React.Component {\n  state = {\n    accessToken: null,\n    previousLoginAttemptFailed: false,\n    expiresIn: 3600000,\n  };\n\n  getUserExpires(token) {\n    const decodedToken = jwt.decode(token);\n    return decodedToken;\n  }\n\n  getAccessToken() {\n    this.setState({\n      accessToken: localStorage.getItem(\"accessToken\"),\n      previousLoginAttemptFailed: false,\n    });\n  }\n\n  componentDidMount() {\n    this.getAccessToken();\n    this.intID = setInterval(() => {\n      this.handleLogout();\n    }, this.state.expiresIn);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intID);\n  }\n\n  isUserLoggedIn() {\n    return !!this.state.accessToken;\n  }\n\n  handleLoginAttempt = (credentials) => {\n    AuthAPI.login(credentials)\n      .then(({ accessToken }) => {\n        localStorage.setItem(\"accessToken\", accessToken);\n        this.getAccessToken();\n      })\n      .catch(() => {\n        this.setState({\n          accessToken: null,\n          previousLoginAttemptFailed: true,\n        });\n      });\n  };\n\n  handleLogout = () => {\n    this.setState({\n      accessToken: localStorage.removeItem(\"accessToken\"),\n      previousLoginAttemptFailed: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ErrorBoundary message=\"Coś nie działa w całej aplikacji\">\n          {this.isUserLoggedIn() ? (\n            <AuthContext.Provider\n              value={{ accessToken: this.state.accessToken }}\n            >\n              {\n                <React.Suspense fallback={\"... Loading\"}>\n                  <AuthApp onLogout={this.handleLogout} />\n                </React.Suspense>\n              }\n            </AuthContext.Provider>\n          ) : (\n            <LoginForm\n              errorMessage={\n                this.state.previousLoginAttemptFailed\n                  ? \"Nie udało się zalogować\"\n                  : null\n              }\n              onLoginAttempt={this.handleLoginAttempt}\n            />\n          )}\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","import React from \"react\";\r\n\r\nconst AuthContext = React.createContext({ accessToken: null });\r\n\r\nexport default AuthContext;\r\n"],"sourceRoot":""}